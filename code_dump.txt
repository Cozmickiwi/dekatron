
fn check_line(line: &Vec<Token>) {
    // First check the ordering of tokens is syntactically correct

    // Make sure delimiters open and close properly
    let mut index = 0;
    while index < line.len() {
        if is_opening_delimiter(&line[index].raw) {
            index = delimiter_check(&line, index);
        } else if index + 1 == line.len()
            && line.len() != 1
            && is_closing_delimiter(&line[index].raw)
            && line[index].raw != ")"
        {
            panic!("Unmatched closing delimiter!");
        }
        index += 1;
    }
    // If the last token isnt a SpecialChar (Like ";" or "{" for example), panic
    // Also panic if the last token is a closing delimiter
    let last_token = line.last().unwrap();
    if last_token.token_type != TokenType::SpecialChar(None)
        || is_closing_delimiter(&last_token.raw)
    {
        //println!("{:?}", line);
        if last_token.raw != ")" && line.len() > 1 {
            panic!()
        }
    };
    // If the first token is a keyword, make sure its not followed by a constant
    // or an operator (with the exception of return constant)
    match line[0].token_type {
        TokenType::Keyword => match line[1].token_type {
            TokenType::Operator(..) => panic!(),
            TokenType::Constant(..) => {
                if line[0].raw != "return" {
                    panic!();
                }
            }
            _ => {}
        },
        TokenType::Constant(..) | TokenType::Operator(..) => panic!(),
        _ => {}
    }
    // Iterate over tokens and make sure ordering of TokenTypes is syntactically correct
    // Exhaustive type checking to be handled by parser
    // This also makes sure identifier names are syntactically correct
    for (i, token) in line.iter().enumerate() {
        match token.token_type {
            TokenType::Keyword => {
                if i != 0 {
                    panic!();
                }
            }
            TokenType::Operator(operator_type) => {
                if i == 0 {
                    panic!()
                }
                let left_val = &line[i - 1];
                let right_val = &line[i + 1];
                match operator_type {
                    OperatorType::Assignment => {
                        if left_val.token_type != TokenType::Identifier {
                            panic!();
                        }
                        match right_val.token_type {
                            TokenType::Identifier | TokenType::Constant(..) => {}
                            TokenType::SpecialChar(None) => {
                                if !is_opening_delimiter(&right_val.raw) {
                                    panic!();
                                }
                            }
                            _ => panic!(),
                        }
                    }
                    OperatorType::Logical
                    | OperatorType::Bitwise
                    | OperatorType::Arithmetic
                    | OperatorType::Relational
                    | OperatorType::Special => {
                        match left_val.token_type {
                            TokenType::Identifier | TokenType::Constant(..) => {}
                            TokenType::SpecialChar(None) => {
                                if !is_closing_delimiter(&left_val.raw) {
                                    panic!();
                                }
                            }
                            _ => panic!(),
                        }
                        match right_val.token_type {
                            TokenType::Identifier | TokenType::Constant(..) => {}
                            TokenType::SpecialChar(None) => {
                                if !is_opening_delimiter(&right_val.raw) {
                                    panic!();
                                }
                            }
                            _ => panic!(),
                        }
                    }
                    OperatorType::IncDec => {
                        if right_val.token_type != TokenType::Identifier {
                            panic!();
                        }
                    }
                }
            }
            TokenType::Constant(..) => {
                if i == 0 {
                    panic!()
                }
            }
            TokenType::Identifier => {
                let tchars: Vec<char> = token.raw.chars().collect();
                if tchars[0].is_numeric() {
                    panic!();
                }
                for c in tchars {
                    if !(c.is_alphanumeric() || c == '_') {
                        panic!();
                    }
                }
            }
            TokenType::SpecialChar(None) => {
                if (i == 0 && token.raw != "{" && token.raw != "}")
                    || (i != 0
                        && i == line.len() - 1
                        && token.raw != ";".to_string()
                        && token.raw != ")".to_string()
                        && token.raw != "{".to_string()
                        && line[i - 1].token_type == TokenType::SpecialChar(None))
                    || (i != line.len() - 1 && token.raw == ";")
                {
                    //println!("{:#?}", token);
                    //println!("{i} \n {:#?}", line);
                    panic!();
                }
            }
            _ => {}
        }
    }
}

fn is_closing_delimiter(token: &String) -> bool {
    return ["}".to_string(), "]".to_string(), ")".to_string()].contains(token);
}

fn is_opening_delimiter(token: &String) -> bool {
    return ["{".to_string(), "[".to_string(), "(".to_string()].contains(token);
}

fn delimiter_check(line: &Vec<Token>, index: usize) -> usize {
    let raw = &line[index].raw;
    let n = line.len();
    // Could potentially make a static variable to avoid unnecessary allocations but cbf rn
    let ocd = [
        [&"(".to_string(), &")".to_string()],
        [&"{".to_string(), &"}".to_string()],
        [&"[".to_string(), &"]".to_string()],
    ];
    let mut i = index + 1;
    while i < n {
        if line[i].token_type == TokenType::SpecialChar(None) {
            //println!("{:?}", &[raw, &line[i].raw]);
            if ocd.contains(&[raw, &line[i].raw]) {
                //println!("CLosinh");
                return i;
            } else {
                if is_closing_delimiter(&line[i].raw) {
                    panic!("Unmatched opening delimiter!");
                } else if is_opening_delimiter(&line[i].raw) && i != n - 1 {
                    i = delimiter_check(line, i);
                }
                if i == n - 1 && index != n - 1 {
                    panic!("Unmatched opening delimiter!");
                }
            }
        }
        i += 1;
    }
    return n;
}
